# Importa as bibliotecas necessárias
import cv2
import mediapipe as mp
from scipy.spatial import distance as dist
import pygame

# --- CONSTANTES ---
# Olhos (Sonolência)
EAR_THRESH = 0.22 
EAR_CONSEC_FRAMES = 15
# Boca (Fadiga/Bocejo)
MAR_THRESH = 1.0
MAR_CONSEC_FRAMES = 15
# Cabeça (Desatenção)
HEAD_TURN_RATIO_MIN = 0.6
HEAD_TURN_RATIO_MAX = 1.4
INATTENTION_THRESH_Y_DOWN = 0.80
INATTENTION_VISUAL_FRAMES = 15  # Aprox. 0.5 segundos para o alerta visual
INATTENTION_AUDIO_FRAMES = 165 # Aprox. 5 segundos APÓS o alerta visual

# --- INICIALIZAÇÃO ---
COUNTER = 0 
YAWN_COUNTER = 0
INATTENTION_COUNTER = 0
ALARM_ON = False

pygame.mixer.init()
som_alarme = pygame.mixer.Sound('alerta.wav') 

mp_face_mesh = mp.solutions.face_mesh
face_mesh = mp_face_mesh.FaceMesh(
    max_num_faces=1,
    refine_landmarks=True,
    min_detection_confidence=0.5,
    min_tracking_confidence=0.5)

def eye_aspect_ratio(eye_landmarks):
    A = dist.euclidean(eye_landmarks[1], eye_landmarks[5])
    B = dist.euclidean(eye_landmarks[2], eye_landmarks[4])
    C = dist.euclidean(eye_landmarks[0], eye_landmarks[3])
    ear = (A + B) / (2.0 * C)
    return ear

def mouth_aspect_ratio(mouth_landmarks):
    A = dist.euclidean(mouth_landmarks[1], mouth_landmarks[3])
    B = dist.euclidean(mouth_landmarks[0], mouth_landmarks[2])
    mar = A / B
    return mar

print("[INFO] Acessando a webcam...")
cap = cv2.VideoCapture(0)

# --- LOOP PRINCIPAL ---
while cap.isOpened():
    success, image = cap.read()
    if not success:
        continue

    h, w, _ = image.shape
    image.flags.writeable = False
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    results = face_mesh.process(image)
    image.flags.writeable = True
    image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

    if results.multi_face_landmarks:
        for face_landmarks in results.multi_face_landmarks:
            landmarks = face_landmarks.landmark
            
            # --- ATUALIZAÇÃO DOS CONTADORES ---
            ear = (eye_aspect_ratio([(int(landmarks[i].x * w), int(landmarks[i].y * h)) for i in [362, 385, 387, 263, 373, 380]]) + \
                   eye_aspect_ratio([(int(landmarks[i].x * w), int(landmarks[i].y * h)) for i in [33, 160, 158, 133, 153, 144]])) / 2.0
            
            if ear < EAR_THRESH: COUNTER += 1
            else: COUNTER = 0

            nose_2d = (int(landmarks[1].x * w), int(landmarks[1].y * h))
            face_left_2d = (int(landmarks[234].x * w), int(landmarks[234].y * h))
            face_right_2d = (int(landmarks[454].x * w), int(landmarks[454].y * h))
            dist_left = dist.euclidean(nose_2d, face_left_2d)
            dist_right = dist.euclidean(nose_2d, face_right_2d)
            turn_ratio = dist_left / dist_right if dist_right > 0 else 1.0
            nose_y = landmarks[1].y
            
            attentive = (HEAD_TURN_RATIO_MIN < turn_ratio < HEAD_TURN_RATIO_MAX) and (nose_y < INATTENTION_THRESH_Y_DOWN)
            
            if attentive:
                INATTENTION_COUNTER = 0
                mar = mouth_aspect_ratio([(int(landmarks[i].x * w), int(landmarks[i].y * h)) for i in [61, 291, 13, 14]])
                if mar > MAR_THRESH: YAWN_COUNTER += 1
                else: YAWN_COUNTER = 0
            else:
                INATTENTION_COUNTER += 1
                YAWN_COUNTER = 0

            # --- LÓGICA DE ACIONAMENTO DOS ALERTAS ---
            drowsy_event = COUNTER >= EAR_CONSEC_FRAMES
            yawn_event = YAWN_COUNTER >= MAR_CONSEC_FRAMES
            inattention_visual_event = INATTENTION_COUNTER >= INATTENTION_VISUAL_FRAMES
            inattention_audio_event = INATTENTION_COUNTER >= INATTENTION_AUDIO_FRAMES 

            # Alarme sonoro unificado para sonolência ou desatenção prolongada
            if drowsy_event or inattention_audio_event:
                if not ALARM_ON:
                    ALARM_ON = True
                    som_alarme.play(loops=-1)
            else:
                if ALARM_ON:
                    ALARM_ON = False
                    pygame.mixer.stop()

            # Alertas visuais
            if drowsy_event:
                cv2.putText(image, "SONOLENCIA!", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
            if yawn_event:
                cv2.putText(image, "FADIGA (BOCEJO)", (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
            if inattention_visual_event:
                cv2.putText(image, "DESATENCAO!", (10, 90), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2)
            
            # Exibição de dados de debug
            cv2.putText(image, f"EAR: {ear:.2f}", (w - 150, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
            cv2.putText(image, f"Ratio: {turn_ratio:.2f}", (w - 150, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)

    cv2.imshow('Monitor de Vigia - Inovatech', image)
    if cv2.waitKey(5) & 0xFF == ord('q'):
        break

# --- FINALIZAÇÃO ---
cap.release()
cv2.destroyAllWindows()
face_mesh.close()
pygame.quit()
